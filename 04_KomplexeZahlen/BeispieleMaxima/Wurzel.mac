/* Aufruf mit

  > maxima --init-mac=Wurzel.mac

*/

/* Die fundamentale Natur der komplexen Zahl ist die des Paares
   (a,b) von reellen Zahlen; in Maxima wird dies durch die Liste
   "[a,b]" dargestellt.

   (Dies ist nur eine Annaeherung: leider hat Maxima keine Paare, Tripel,
    Quadrupel, etc., sondern nur Listen, die *variable* Laenge haben.)

   Die zwei fundamentalen zusaetzlichen Darstellungen sind die als
     2x2 Matrizen,
     2-Vektoren (immer Spaltenvektoren).

   (Eine reelle Zahl als Tupel ist ein 1-Tupel, als Matrix ist eine 1x1-Matrix,
    als Vektor ist ein 1-Vektor.)

*/

display2d : false;
fpprec : 100;
load("bf_fmin_cobyla")$


/* The Operationen mit komplexen Zahlen [a,b]: */
cadd(x,y) := [x[1]+y[1], x[2]+y[2]]; /* oder einfach x+y */
cmul(x,y) := combine([x[1]*y[1] - x[2]*y[2], x[1]*y[2] + x[2]*y[1]]);
ccon(x)   := [x[1], -x[2]]; /* Konjugation */
casq(x)   := x[1]^2 + x[2]^2;
cabs(x)   := sqrt(casq(x)); /* Absolutwert */
crec(x)   := ccon(x) / casq(x); /* Reziprokwert */

/* Potenzen mit ganzen Zahlen n: */
capow(x,n) := if n<0 then crec(capow(x,-n))
  else if n=0 then [1,0] else if n=1 then x
  else cmul(x, capow(x,n-1));

/* Komplexe Exponentialfunktion */
cexp(x) := exp(x[1]) * [cos(x[2]), sin(x[2])];

/* Beispiele:
cadd([a,b],[c,d]);
  [c+a,d+b]
[a,b]+[c,d];
  [c+a,d+b]
cmul([a,b],[c,d]);
  [a*c-b*d,a*d+b*c]
ccon([a,b]);
  [a,-b]
casq([a,b]);
  b^2+a^2
cabs([a,b]);
  sqrt(b^2+a^2)
crec([a,b]);
  [a/(b^2+a^2),-b/(b^2+a^2)]

capow([a,b],2);
  [a^2-b^2,2*a*b]

cexp([0,2*%pi]);
  [1,0]
*/

/* Eigenschaften von cexp:

1) Auf reellen Zahlen identisch mit exp:

cexp([x,0]) - [exp(x), 0];
  [0,0]

2) Fuer rein-imaginaere Argumente liegen die Werte auf dem Einheitskreis:

cabs(cexp([0,x]));
  sqrt(sin(x)^2+cos(x)^2)
radcan(exponentialize(sqrt(sin(x)^2+cos(x)^2)));
  1

3) Uebersetzt Addition nach Multiplikation:

radcan(exponentialize(cexp([a,b]+[c,d]) - cmul(cexp([a,b]), cexp([c,d]))));
  [0,0]

4) Ist vertraeglich mit komplexer Konjugation:

cexp(ccon([a,b])) - ccon(cexp([a,b]));
  [0,0]

5) Uebersetzt Multiplikation nach Exponentiation:

Siehe Anmerkunge zu cpow: cexp(z * z') = cexp(z)^z',
wobei fuer exp(z)^z' = cpow(cexp(z), z', k) der Zweig
  k = cbranch(z)
gewaehlt wird.

*/


/* Quadratwurzeln von komplexen Zahlen */

/* Hilfsfunktionen: */
sgn(x) := if x>=0 then 1 else -1;
p(x) := sqrt(1/2*(x[1] + cabs(x)));
h(x) := sqrt(1/2*(-x[1] + cabs(x)));
q(x) := sgn(x[2]) * h(x);
/* Anmerkungen fuer b=0:
   p([a,0]) = if a>=0 then sqrt(a) else 0
   q([a,0]) = if a>=0 then 0 else sqrt(-a)
*/

/* Die beiden Quadratwurzeln: */
w1(x) := [p(x), q(x)];
w2(x) := -w1(x);

/*

Anschauen von Wurzeln:

plot2d([p([a,-2]), q([a,-2])], [a,-10,10]);
plot2d([p([a,-1]), q([a,-1])], [a,-10,10]);
plot2d([p([a,0]), q([a,0])], [a,-10,10]);
plot2d([p([a,1]), q([a,1])], [a,-10,10]);
plot2d([p([a,2]), q([a,2])], [a,-10,10]);

plot3d(p([a,b]), [a,-10,10], [b,-10,10])$
plot3d(q([a,b]), [a,-10,10], [b,-10,10])$

plot3d(p([a,b]), [a,-10,10], [b,0,10])$
plot3d(q([a,b]), [a,-10,10], [b,0,10])$

plot3d([p([a,b]), q([a,b]), [a,-10,10], [b,0,10]], [gnuplot_pm3d,false], [color,black,yellow])$

Error with plotting -- only using one colour; simpler example:

plot3d([a+b, a-b, [a,-10,10], [b,-10,10]], [gnuplot_pm3d,false], [color,yellow,black])$


Numerisches Testen auf Wurzeleigenschaft:

bf_fmin_cobyla(-cabs(capow(w1([a,b]),2) - [a,b]), [a, b], [0,0], constraints = [a <= 3, a >= -3, b <= 3, b >= -3]);

Beweisen der Wurzeleigenschaften, mittels Fallunterscheidung:

assume(b >= 0);
rootscontract(cmul(w1([a,b]),w1([a,b])));
  [a,b]
forget(b >= 0);
assume(b < 0);
rootscontract(cmul(w1([a,b]),w1([a,b])));
  [a,-sqrt(b^2)]
is([a,-sqrt(b^2)] = [a,b]);
  true

forget(b < 0);
assume(b >= 0);
rootscontract(cmul(w2([a,b]),w2([a,b])));
  [a,b]
forget(b >= 0);
assume(b < 0);
rootscontract(cmul(w2([a,b]),w2([a,b])));
  [a,-sqrt(b^2)]

*/


/* Matrix-Darstellung von komplexen Zahlen [a,b]:

  a -b
  b a

*/

c2m(x) := matrix([x[1],-x[2]],[x[2],x[1]]);
mcp(m) := matrix_size(m) = [2,2] and m[1,1] = m[2,2] and m[2,1] = -m[1,2];
m2c(m) := [m[1,1], m[2,1]];

/*

  mcp(c2m([a,b]) + c2m([c,d]));
    true
  m2c(c2m([a,b]) + c2m([c,d]));
    [c+a,d+b]

  mcp(c2m([a,b]) . c2m([c,d]));
    true
  m2c(c2m([a,b]) . c2m([c,d]));
    [a*c-b*d,a*d+b*c]
  cmul([a,b],[c,d]);
    [a*c-b*d,a*d+b*c]

  mcp(invert(c2m([a,b])));
    true
  m2c(invert(c2m([a,b])));
    [a/(b^2+a^2),-b/(b^2+a^2)]
  crec([a,b]);
    [a/(b^2+a^2),-b/(b^2+a^2)]

*/

/* Komplexe Zahlen als Vektoren */

load("eigen");

c2v(x) := columnvector(x);
v2c(v) := [v[1][1], v[2][1]];

/*

v2c(c2m([a,b]) . c2v([c,d]));
  [a*c-b*d,a*d+b*c]

*/


/* Der "Winkel" (das "Argument") von komplexen Zahlen

  a -b
  b a

  =

  |[a,b]| *

    cos(alpha) -sin(alpha)
    sin(alpha)  cos(alpha)

   wobei alpha der Winkel von [a,b] ist (bestimmt modulo 2 pi).

   (Anmerkung: sin(alpha)^2 + cos(alpha)^2 = 1.)

   Der Winkel alpha von [a,b] ist also eine Zahl alpha in RR
   mit

     |[a,b]| * cos(alpha) = a
     |[a,b]| * sin(alpha) = b.

   Dies ist eindeutig modulo 2 pi fuer [a,b] # 0, waehrend fuer
   [0,0] der Winkel beliebig ist.

   Mittels der komplexen Exponentialfunktion werden die beiden Gleichungen
   (aequivalent) zu einer zusammengefasst:

     [a,b] = |[a,b]| * exp(i * alpha) = |[a,b]| * (cos(alpha) + i * sin(alpha)),

   da ja

     exp(i * alpha) = exp([0,alpha]) = [cos(alpha), sin(alpha)].

   Die rechte Seite, als Term(!), wird als "Polardarstellung" von [a,b] bezeichnet.

   Gegeben ein Winkel und die Laenge von einer komplexen Zahl z, so kann
   z eindeutig rekonstruiert werden.
   (Fuer Laenge 0 braucht man den Winkel ueberhaupt nicht, ansonsten kann man
      k * 2 pi
    fuer beliebige ganze k zum Winkel addieren, und erhaelt immer z.)

   Wir normieren den Winkel in der Funktion arg_c([a,b]) auf das halboffene
   Intervall [0, 2 pi).

*/

arg_c(x) := block([a : x[1], b : x[2]],
  if a = 0 and b = 0 then und
  else if a > 0 then
    if b >= 0 then atan(b/a)
    else 2*%pi + atan(b/a)
  else if a < 0 then
    if b >= 0 then %pi + atan(b/a)
    else %pi + atan(b/a)
  else
    if b >= 0 then %pi / 2
    else  3/2 * %pi);

/*

arg_c([0,0]);
  und
arg_c([1,0]);
  0
arg_c([0,1]);
  %pi/2
arg_c([-1,0]);
  %pi
arg_c([0,-1]);
  (3*%pi)/2

plot2d(arg_c(cexp([0,x])), [x,-10,10]);

Die entsprechenden Winkel in Maxima, mittels der Polardarstellung:

polarform(1);
1
(%i48) polarform(%i);
(%o48) %e^((%i*%pi)/2)
(%i49) polarform(-1);
(%o49) %e^(%i*%pi)
(%i51) polarform(-%i);
(%o51) %e^-((%i*%pi)/2)


Beweis der Gleichung zur Polarform:

assume(a > 0);
assume(b >= 0);
rootscontract(cabs([a,b]) * cexp([0, arg_c([a,b])]));
  [a,b]
forget(b >= 0);
assume(b < 0);
rootscontract(cabs([a,b]) * cexp([0, arg_c([a,b])]));
  [a,b]
forget(a > 0);
assume(a < 0);
rootscontract(cabs([a,b]) * cexp([0, arg_c([a,b])]));
  [-sqrt(a^2),-(sqrt(a^2)*b)/a]
forget(b < 0);
assume(b >= 0);
rootscontract(cabs([a,b]) * cexp([0, arg_c([a,b])]));
  [-sqrt(a^2),-(sqrt(a^2)*b)/a]
is(-sqrt(a^2) = a);
  true

*/

/* Wir sehen nun, wie z=exp([a,b]) einfach zu interpretieren ist:

     - Der Betrag von z (die Laenge) ist exp(a) > 0.
     - Ein Winkel von z ist b.

   Die Loesungen von exp([a,b]) = z (z#0 gegeben, a,b zu bestimmen) sind
   also einfach wie folgt:

     - a = log(|z|)
     - b ist ein Winkel von z.

*/

/* Fuer ganzzahlige k: */
clog(z,k) := if z=[0,0] then undef else [log(cabs(z)), arg_c(z) + k * 2*%pi];

/*

declare(n, integer);

assume(a > 0);
assume(b >= 0);
radcan(cexp(clog([a,b],n)));
  [a,b]
forget(b >= 0);
assume(b < 0);
  [a,b];
forget(a > 0);
assume(a < 0);
radcan(cexp(clog([a,b],n)));
  [a,b]
forget(b < 0);
assume(b >= 0);
radcan(cexp(clog([a,b],n)));
  [a,b]

*/

/* Fuer beliebiges z das eindeutige k mit
     clog(cexp(z), k) = z :
*/
cbranch(z) := floor(z[2] / 2 / %pi);
/*
test(z) := cabs(clog(cexp(z), cbranch(z)) - z);
plot3d(test([a,b]), [a,-2,2], [b,-2,2]);
*/

/* a^b im k-ten Zweig:
  log(a^b) = b * log(a) => exp(log(a^b)) = a^b = exp(b * log(a))
*/
cpow(a,b,k) := if a=[0,0] then undef else cexp(cmul(clog(a,k), b));

/* Testen auf Quadratwurzel:
plot3d(cabs(cpow([a,b],[1/2, 0],0) - w1([a,b])), [a,-2,2],[b,0,2]);
plot3d(cabs(cpow([a,b],[1/2, 0],1) - w1([a,b])), [a,-2,2],[b,-2,0]);
plot3d(cabs(cpow([a,b],[1/2, 0],1) - w2([a,b])), [a,-2,2],[b,0,2]);
plot3d(cabs(cpow([a,b],[1/2, 0],0) - w2([a,b])), [a,-2,2],[b,-2,0]);

Exponent 0:
cpow([a,b], [0,0], k);
  [1,0]

Exponent 1:

assume(a > 0);
assume(b >= 0);
radcan(cpow([a,b],[1,0],0));
  [a,b]

forget(a > 0);
assume(a < 0);
radcan(cpow([a,b],[1,0],0));
   [a,b]

"z^1" = cpow(z,[1,0],k) = exp(cmul(clog(z,k), [1,0])) = exp(clog(z,k)) = z. QED


Ganzzahlige Exponenten:

Das allgemeine Gesetz ist fuer z#0 und ganzzahlige k, n:

  cpow(z,[n,0],k) = capow(z,n).

Numerisches Testen:
bf_fmin_cobyla(-cabs(cpow([a,b],[1,0],0) - capow([a,b],1)), [a, b], [1,1], constraints = [a <= 3, a >= -3, b <= 3, b >= -3]);
bf_fmin_cobyla(-cabs(cpow([a,b],[2,0],0) - capow([a,b],2)), [a, b], [1,1], constraints = [a <= 3, a >= -3, b <= 3, b >= -3]);

Bestaetigt Gesetz numerisch.
Symbolisch scheint es schwieriger:
assume(a > 0);
assume(b >= 0);
radcan(cpow([a,b],[2,0],k) - capow([a,b],2));
  [(b^2+a^2)*cos(2*atan(b/a))+b^2-a^2,(b^2+a^2)*sin(2*atan(b/a))-2*a*b]
f(a,b) := (b^2+a^2)*cos(2*atan(b/a))+b^2-a^2;
radcan(f(1,2));
  5*cos(2*atan(2))+3
float(bfloat(f(1,2)));
  -1.142987391282275E-100


Basis %e ergibt cexp:
plot3d(cabs(cexp([a,b]) - cpow([%e,0],[a,b],0)), [a,-2,2], [b,-2,2]);
cpow([%e,0],[a,b],0);
  [%e^a*cos(b),%e^a*sin(b)]

Alle Zweige e^z sind verschieden (da ja z.B. fuer z=1/n alle n-ten Wurzeln
berechnet werden.
k:0;
plot2d([cpow([%e,0],[x,0],k)[1], cpow([%e,0],[x,0],k)[2]], [x,-2,2]);
Fuer wachsendes abs(k) >= 1 ergeben sich immer hoeherfrequente Schwingungen.

Welche der Regeln fuer cexp koennen verallgemeinert werden?


0) Welche Rechenregeln gelten fuer b^x, b > 0, x komplex, fester Zweig?
(In Verallgemeinerung von cexp(x) = cpow([%e,0], x, 0).)


1) Potenzregel a^(b+c) = a^b * a^c

Hier wird natuerlicherweise fuer "a^x" immer der gleiche Zweig verwendet, und dann gilt es.

declare(k, integer);
assume(a > 0);
assume(b >= 0);
radcan(exponentialize(cpow([a,b], [c,d]+[e,f], k) - cmul(cpow([a,b],[c,d],k), cpow([a,b],[e,f],k))));
  [0,0]


2) Potenzregel (a^b)^c = a^(b*c) ?
Wann gilt

  cpow(cpow(a,b,k), c, k') = cpow(a, cmul(b, c), k'') ?
Aufgabe ist es, die Tripel (k,k',k'') zu bestimmen.

Eine Loesung ist:

  k'' = k, k' = cbranch(cmul(b, clog(a,k))). (1)

Denn dann (unter Verwendung von a*b := cmul(a,b)):

    cpow(cpow(a,b,k), c, k') = cexp(c * clog(cexp(b * clog(a,k)), k')
    = cexp(c * (b * clog(a,k)) (wegen cbranch)
    = cexp((b * c) * clog(a,k'')) = cpow(a, b*c, k'').

Man sieht, dass eine allgemeine Bestimmungsgleichung fuer k'' gegeben ist durch

  cexp((b * c) * clog(a,k)) = cexp((b * c) * clog(a,k'')).

Wenn b=0 oder c=0, dann ist dies immer erfuellt (k'' ist also beliebig).
Ansonsten ist
  b*c*clog(a,k) = b*c*clog(a,k'') mod 2pi
zu loesen.

Spezialfall:

  cpow(cpow(z,z', k), crec(z'), k') = cpow(z, cmul(z', crec(z')), k'') = cpow(z, 1, k'') = z ?

Gibt es immer solche k, k'? Wenn ja, dann welche?
Rechenbeispiel:
(%i11) float(cpow(cpow([-50000,3000],[2,51],-1), crec([2,51]),86));
(%o11) [-50000.00000000002,2999.999999999983]

Die allgemeine Behandlung ist wie folgt:
Hier ist also k'' beliebig, und man kann k' = cbranch(cmul(b, clog(a,k))) waehlen.

Anderer Spezialfall:

  cexp(cmul(z, z')) = cpow(cexp(z), z', k) ?

k = cbranch(z) ist eine Loesung.

*/

/* Testen von (1): */
test_powadd(v, k) := block(
  [a:[v[1],v[2]],b:[v[3],v[4]],c:[v[5],v[6]], old_prec:fpprec, res],
  fpprec : 2000,
  res : float(bfloat(cpow(a, b+c, k) - cmul(cpow(a,b,k), cpow(a,c,k)))),
  fpprec : old_prec,
  res)$
/*
bf_fmin_cobyla(-cabs(test_powadd([a,b,c,d,e,f],0)), [a,b,c,d,e,f], [1,1,0,0,0,0]);
*/

/* Testen von (2): */
test_powmul(v, k) := block(
  [a:[v[1],v[2]],b:[v[3],v[4]],c:[v[5],v[6]], ks, old_prec:fpprec, res],
  ks : cbranch(cmul(b, clog(a,k))),
  fpprec : 2000,
  res : float(bfloat(cpow(cpow(a,b,k), c, ks) - cpow(a, cmul(b, c), k))),
  fpprec : old_prec,
  res)$
/*
bf_fmin_cobyla(-cabs(test_powmul([a,b,c,d,e,f],0)), [a,b,c,d,e,f], [1,1,0,0,0,0]);
*/
/* Spezialfall c=1/b: */
test_powrec(a,b,k) := cpow(cpow(a,b,k), crec(b), cbranch(cmul(b, clog(a,k))))$
/* Spezialfall a=%e: */
test_powexp(z1,z2) := cexp(cmul(z1, z2)) - cpow(cexp(z1), z2, cbranch(z1));

